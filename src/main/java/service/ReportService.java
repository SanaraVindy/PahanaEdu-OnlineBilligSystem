package service;

import dao.ReportDAO;
import model.MonthlySalesSummary;
import model.Report;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * Service class for handling business logic related to reports.
 * This class acts as a middleman between the Controller and the DAO.
 */
public class ReportService {

    // The service layer holds an instance of the DAO. This is a good pattern.
    private ReportDAO reportDAO;

    // Constructor to initialize the DAO.
    public ReportService() {
        this.reportDAO = new ReportDAO();
    }

    /**
     * Retrieves the top customers report based on specified criteria.
     * @param fromDate The start date for the report.
     * @param toDate The end date for the report.
     * @param customerLimit The number of top customers to return.
     * @return A list of Report objects.
     * @throws SQLException if a database access error occurs.
     * @throws IllegalArgumentException if input parameters are invalid.
     */
    public List<Report> getTopCustomersReport(String fromDate, String toDate, int customerLimit) throws SQLException {
        // Excellent input validation. The service layer is a great place for this.
        if (fromDate == null || fromDate.trim().isEmpty() || toDate == null || toDate.trim().isEmpty() || customerLimit < 1) {
            throw new IllegalArgumentException("Invalid input parameters for top customers report.");
        }
        return reportDAO.getTopCustomersReport(fromDate, toDate, customerLimit);
    }

    /**
     * Retrieves a monthly sales summary report for a given year.
     * @param year The year for the report.
     * @return A list of MonthlySalesSummary objects.
     * @throws SQLException if a database access error occurs.
     * @throws IllegalArgumentException if the year is invalid.
     */
    public List<MonthlySalesSummary> getMonthlySalesSummary(String year) throws SQLException {
        // Good input validation, specifically checking for a 4-digit year format.
        if (year == null || year.trim().isEmpty() || !year.matches("\\d{4}")) {
            throw new IllegalArgumentException("Invalid year provided. Year must be a 4-digit number.");
        }
        return reportDAO.getMonthlySalesSummary(year);
    }
  
    /**
     * This method seems to be a placeholder generated by an IDE.
     * It's a good practice to either implement it or remove it entirely to avoid
     * unexpected `UnsupportedOperationException` errors.
     *
     * @param string The year for the report.
     */
    public void getMonthlySalesSummaryReport(String string) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}